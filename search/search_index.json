{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Here you will find the documentation for the code I have written.</p> <p>If you are looking for the dependencies of this project, take a look at this page.</p> <p>Deprecated Files</p> <p>Any docs with a Deprecated notice will not have their pages updated. Any links on said pages are not guaranteed to lead to the correct files nor even work.</p>"},{"location":"Dependencies/","title":"Dependencies","text":""},{"location":"Dependencies/#from-wally","title":"From Wally","text":""},{"location":"Dependencies/#squash","title":"Squash","text":"<p>By SolarScuffle-Bot</p> <p>&gt; Download</p> <p>&gt; Documentation</p>"},{"location":"Dependencies/#roblox-lua-promise","title":"roblox-lua-promise","text":"<p>By evaera</p> <p>&gt; Download</p> <p>&gt; Documentation</p>"},{"location":"Dependencies/#fastsignal","title":"FastSignal","text":"<p>By LucasMZ</p> <p>&gt; Download</p> <p>&gt; Documentation</p>"},{"location":"Dependencies/#vide","title":"Vide","text":"<p>By centau</p> <p>&gt; Download</p> <p>&gt; Documentation</p>"},{"location":"Dependencies/#class-classpp","title":"Class++ (ClassPP)","text":"<p>By TenebrisNoctua</p> <p>&gt; Download</p> <p>&gt; Documentation</p>"},{"location":"Dependencies/#from-npm","title":"From NPM","text":""},{"location":"Dependencies/#pretty-vide-utils","title":"pretty-vide-utils","text":"<p>By PepeElToro41</p> <p>&gt; Download</p> <p>&gt; GitHub page</p>"},{"location":"Dependencies/#manually-installed","title":"Manually-installed","text":""},{"location":"Dependencies/#crpslinemodules-200","title":"CRPSlineModules [2.0.0]","text":"<p>By bhristt</p> <p>&gt; Download and documentation</p>"},{"location":"AI/AICreationInformation/","title":"AI Initialisation Parameters","text":"<p>Located at <code>src/pirvate/Components/AI/init.luau</code>.</p> <p>Required*</p> <p>Entries with a * are required parameters. Each table represents a table in the order each parameter goes in.</p>"},{"location":"AI/AICreationInformation/#pathfinding-component","title":"Pathfinding Component","text":"<p>Located at <code>src/private/Components/AI/PathfindingAI.luau</code>.</p> <p>Deprecation</p> <p><code>src/private/Components/AI/PathfindingAIOld.luau</code> is now deprecated. Scripts relying on that module should switch over to the newer module.</p>"},{"location":"AI/AICreationInformation/#locked_information","title":"locked_information*","text":"Name Value Explanation rig* model The rig that should be controlled by this script. It must have a <code>Humanoid</code>. state_manager_script* script Used to adjust attributes that are used by a \"StateManagerScript\". owner_script* script The script that created the class. seed number What seed should be used when creating <code>Random.new()</code>."},{"location":"AI/AICreationInformation/#target_tags","title":"target_tags","text":"Name Value Explanation [None] string A tag from <code>CollectionService</code> whose tagged parts should be included in the list of possible parts to pathfind to. [None] string A tag from <code>CollectionService</code> whose tagged parts should be included in the list of possible parts to pathfind to. [None] string A tag from <code>CollectionService</code> whose tagged parts should be included in the list of possible parts to pathfind to. ... string A tag from <code>CollectionService</code> whose tagged parts should be included in the list of possible parts to pathfind to."},{"location":"AI/AICreationInformation/#pathfinding_settings","title":"pathfinding_settings","text":"Name Value Explanation view_distance number How far the AI should be able to see targets from. search_tries number How many times the AI should try to search for the target if it can't find the target. maximum_target_index number How many targets should be chosen from.(This is based off which targets are closest, and then chosen randomly.) path_settings table See: below. combat_settings table See: below."},{"location":"AI/AICreationInformation/#path_settings","title":"path_settings","text":"<p>Please reference Roblox's documentation.</p>"},{"location":"AI/AICreationInformation/#combat_settings","title":"combat_settings","text":"Name Value Explanation should_stop_on_enemy_sight number Whether the AI should stop when seeing an enemy or not. movespeed_reduction_on_enemy_sight number How much slower should the AI move when seeing an enemy. grenade_avoidance_radius number How close can the AI be to a grenade before trying to avoid it."},{"location":"AI/AICreationInformation/#visualisation_settings","title":"visualisation_settings","text":"Name Value Explanation visualise_path boolean Whether the path the AI is going to take should be visualised or not. node_spacing number How far away each node should be from each other in studs in the visualised path.Note: The smallest node spacing possible is equal to the node spacing from <code>pathfinding_settings.path_settings.WaypointSpacing</code>. node_size number How big each node should be (in studs). Note: The size will be <code>Vector3.new(#, #, #)</code>. jump_node_size_multiplier number How much bigger (multiplied) should a <code>Jump</code> <code>PathWaypoint.Action</code> should be compared to a <code>Walk</code> <code>PathWaypoint.Action</code>. custom_node_size_multiplier number How much bigger (multiplied) should a <code>Custom</code> <code>PathWaypoint.Action</code> should be compared to a <code>Walk</code> <code>PathWaypoint.Action</code>."},{"location":"AI/AICreationInformation/#target_information","title":"target_information","text":"Name Value Explanation shared_table SharedTable A <code>SharedTable</code> which includes the positions of every potential target.This table should be indexed as {[tag]: {[path_to_target]: <code>Vector3</code>}}."},{"location":"AI/AICreationInformation/#combat-component","title":"Combat Component","text":"<p>Located at <code>src/private/Components/AI/CombatAI.luau</code>.</p> <p>TBA.</p>"},{"location":"AI/CombatAI/","title":"CombatAI","text":"<p>Located at <code>src/private/Components/AI/CombatAI.luau</code>.</p> <p>TBA.</p>"},{"location":"AI/PathfindingAI/","title":"PathfindingAI","text":"<p>Located at <code>src/private/Components/AI/PathfindingAI.luau</code>.</p>"},{"location":"AI/PathfindingAI/#signals","title":"Signals","text":"Name Explanation Changed TBA. Destroying TBA. StartedMoving TBA. StoppedMoving TBA. SearchBegan TBA. SearchFinished TBA. _CustomWaypointActions TBA."},{"location":"Dictionaries/WeaponInformation/","title":"Gun Statistics","text":""},{"location":"Dictionaries/WeaponInformation/#general-functionality","title":"General functionality","text":"Name Value \u00a0Explanation TypeOfBullet int 1: Hitscan  2: Bullet Damage number How much damage a bullet does. ShotDelay number How many shots/minute to fire at. Range number How far the bullet can go in studs. XSpread number The x-component spread of the bullet in degrees. YSpread number The y-component spread of the bullet in degrees. ReloadSpeed number How long it takes to reload in seconds. MagazineSize int How many shots are in a magazine. ReserveSize int The total amount of bullets."},{"location":"Dictionaries/WeaponInformation/#for-shotguns","title":"For Shotguns","text":"Name Value \u00a0Explanation AmountOfShots int How many shots to fire in a pellet."},{"location":"Dictionaries/WeaponInformation/#for-burst-style-guns","title":"For Burst-style Guns","text":"Name Value \u00a0Explanation ShotsPerBurst int How many shots to shoot per burst. DelayBetweenBurst number How long to wait in seconds between each shot in a burst."},{"location":"Dictionaries/WeaponInformation/#if-typeofbullet-is-2","title":"If TypeOfBullet Is 2","text":"Name Value \u00a0Explanation BulletSpeed number How fast the bullet should go in studs/second. BulletDrop number How fast the bullet should drop in studs/second. PierceAmount int How many parts the bullet can pierce. PierceFallOffDamage number How much damage should be lost when piercing a part.  This is calculated as: \\(damage = damage - (damage \\div {100 \\times falloff})\\)."},{"location":"Self-Made-Libraries/GeneralLibrary/","title":"General Library","text":"<p>Located at: <code>src/shared/Helpers/GeneralLibrary.luau</code></p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#types","title":"Types","text":""},{"location":"Self-Made-Libraries/GeneralLibrary/#promisereturn","title":"PromiseReturn","text":"<p>This type is returned by the module.Promises.*() functions.</p> Value Type Explanation .Resolve any? The value(s) that are resolved from the promise (if there are any). .Resolved boolean \u00a0Whether the promise resolved or not. .Error any? The error that was returned from the promise (if there is any). .Reject any? The value(s) that are rejected from the promise (if there are any). .Failure any? Any values that are returned from the failureHandler (if there are any). .Promise (...any) -&gt; ...any The promise that all the values came from. This value can be used to call the promise again in the case of not resolving. .ExceptionHandler (PromiseReturn: PromiseReturn, reportSuccess: boolean?) -&gt; ((...any) -&gt; ...any, PromiseReturn) Used to allow the chaining of module.Promise.ExceptionHandler(). <p>Warning</p> <p>When a function creates this type, not all values will be filled. Make sure you know (or add acheck for) which values will be filled before implementing code that uses this type!</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#promise-related-functions","title":"Promise-related Functions","text":""},{"location":"Self-Made-Libraries/GeneralLibrary/#promisehandler","title":".PromiseHandler()","text":"Psuedo code<pre><code>function module.Promises.PromiseHandler(promise: (...any) -&gt; ...any, await: boolean, ...: any)\n    ...\n    return PromiseReturn\nend\n</code></pre> <p>This function is used to handle promises in a generic, reliable way.</p> Name Explanation promise This is the promise that the function will be executing. await Either calls the function using promise:andThen() or promise:await(). ... The parameters of the promise. <p>The values for PromiseReturn is set this way:</p> Psuedo code<pre><code>function module.Promises.PromiseHandler()\n    local promiseReturn: PromiseReturn = {}\n\n    local function success(...)\n        promiseReturn.Resolve = ...\n        promiseReturn.Resolved = true\n    end\n\n    local function failure(...)\n        promiseReturn.Failure = ...\n    end\n\n    if await ~= true then\n        my_promise(...):andThen(success, failure)\n\n        return promiseReturn\n    end\n\n    local succeeded, returned = my_promise(...):await()\n\n    if succeeded == false then\n        promiseReturn.Reject = returned\n\n        return promiseReturn\n    end\n\n    promiseReturn.Resolved = true\n    promiseReturn.Resolve = returned\n\n    return promiseReturn\nend\n</code></pre> Source Code <p>Although this is very close to the actual code, you can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#exceptionhandler","title":":ExceptionHandler()","text":"Psuedo code<pre><code>function module.Promises.ExceptionHandler(PromiseReturn: PromiseReturn, reportSuccess: boolean?)\n    ...\n    return (PromiseReturn.Promise, PromiseReturn)\nend\n</code></pre> <p>This function is meant to be chained onto <code>module.Promises.PromiseHandler()</code>.</p> Example<pre><code>local promise, returned = module.Promises.PromiseHandler(my_promise, false):ExceptionHandler()\n</code></pre> <p>When this function is ran, it uses the returned value from <code>module.Promises.PromiseHandler()</code> and writes an output.</p> <p>If <code>reportSuccess</code> is true, it will write PromiseReturn.Resolve to output if the promise ran successfully.</p> <p>If the promise doesn't succeed, the function will write to output what state the promise was left in and any applicable error.</p> Psuedo code<pre><code>function module.Promises.ExceptionHandler(...)\n    ...\n    if PromiseReturn.Resolved == true then\n        if reportSuccess == true then\n            -- If the promise resolves, then print the value that is resolved from the promise.\n            print(PromiseReturn.Resolve .. partial traceback)\n        end\n    else\n        if PromiseReturn.Error then\n            -- If the promise errors, stop the programme and error the error.\n            error(\"Promise errored:\" .. PromiseReturn.Error .. full traceback)\n        else\n            -- If the promise was rejected, warn the value that got rejected.\n            warn(\"Promise rejected:\" .. PromiseReturn.Reject .. full traceback)\n        end\n    end\n    ...\nend\n</code></pre> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#number-related-functions","title":"Number-related Functions","text":""},{"location":"Self-Made-Libraries/GeneralLibrary/#oom","title":".oom()","text":"Pseudo Code<pre><code>function module.NumberManipulation.oom(input: number): order of magnitude\n    return order of magnitude\nend\n</code></pre> <p>Returns the order of magnitude of a b10 number.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#round","title":".Round()","text":"Psuedo Code<pre><code>function module.NumberManipulation.Round(input: number, places: number?): rounded number\n    local rounded_number = math.round(input * math.pow(10, places)) / places\n\n    return rounded_number\nend\n</code></pre> <p>If <code>places</code> is specified, will round <code>input</code> to the specified amount of decimal places. Otehrwise, will round to the nearest whole number.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#truncate","title":".Truncate","text":"Psuedo Code<pre><code>function module.NumberManipulation.Truncate(input: number, places: number):\n    truncated number\n\n    local order of magnitude = module.NumberManipulation.oom(input)\n    local truncated number = math.floor(input * math.pow(10, places - order of magnitude)) * order of magnitude\n\n    return truncated number\nend\n</code></pre> <p>Truncates a number to a specified number of places.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#delta","title":".Delta","text":"Psuedo Code<pre><code>function module.NumberManipulation.Delta(initial: number|Vector3, final: number|Vector3): number\n    if typeof(initial) == Vector3 and typeof(final) == Vector3 then\n        return (final-initial).Magnitude\n    else\n        return final-initial\n    end\nend\n</code></pre> <p>Finds the difference between two numbers or two Vector3s and returns it.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#table-related-functions","title":"Table-related Functions","text":""},{"location":"Self-Made-Libraries/GeneralLibrary/#createrelativetable","title":".CreateRelativeTable()","text":"Psuedo Code<pre><code>function module.TableManipulation.OrderRelativeTable(tableOfPositions: {[number]: Vector3},\n    startPoint: Vector3?): {[number]: {[number]: {Distance: number, Index: number}}}\n\n    if startPoint then\n        table.insert(tableOfPositions, 1, startPoint)\n    end\n\n    local relative_distances = {}\n\n    for initial_index, position in pairs(tableOfPositions) do\n        for related_index, related_position in pairs(tableOfPositions) do\n            relative_distances[initial_index][related_index] = {Distance = \n                (position-related_position).Magnitude, Index = related_index}\n        end\n    end\n\n    return relative_distances\nend\n</code></pre> <p>A diagram to explain what's going on.</p> <pre><code>flowchart TD\n    subgraph one[Mainloop]\n    AA[Start] --&gt; A\n    C[Return table]\n    end\n    subgraph two[Looping through tableOfPositions]\n        A[tableOfPositions] -- Create subtable --&gt; E\n        B[Finished creating subtable?] -- No / Continue looping through the table --&gt; E\n        B -- Yes / Move to next subtable--&gt; A -- Not finished creating subtables --&gt; A\n        A -- FInished creating every subtable --&gt; C\n    end\n    subgraph three[Filling Out Subtables]\n        E[Find delta between looped-index position and group position] --&gt; F\n        F[Create subtable] --&gt; G[Fill out the Distance as the delta and the Index as the subgroup-index] --&gt; B\n    end\n</code></pre> <p>The code creates a subtable for every entry in tableOfPositions for every index and its distance from another index including its own index (this being a distance of zero).</p> <p>This is stylised as [index][compared-to-index] = {Distance between both indexes' positions, compared-to-index}.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#orderrelativetable","title":".OrderRelativeTable()","text":"<p>Use Case</p> <p>Only use this function when dealing with a relative table that is based off distances.</p> Psuedo Code<pre><code>function module.TableManipulation.OrderRelativeTable(tableOfRelativeDistances:\n    {[number]: {[number]: {Distance: number, Index:number}}}): {[number]:\n    {Distance: number, Index: number}}\n\n    for _, subtable in pairs(tableOfRelativeDistances) do\n        table.sort(subtable, function(a, b)\n            if a.Distance &lt; b.DIstance then\n                return true\n            else\n                return false\n            end\n        end)\n    end\n\n    ...\n    local ordered_table: {[number]: {Distance: number, Index: number}} = {}\n\n    for i, v in pairs(tableOfRelativeDistances) do\n        local previous_index = ordered_table[i-1].Index\n        ordered_table[i][previous_index] =\n            {Distance = tableOfRelativeDistances[i][previous_index].Distance,\n            Index = tableOfRelativeDistances[i][previous_index].Index}\n    end\n    ...\n\n    return ordered_table\nend\n</code></pre> <p>Sorts an unordered relative table returned by <code>module.TableManipulation.CreateRelativeTable()</code> based on shortest distance between indexes. </p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#type-conversion-related-functions","title":"Type Conversion Related Functions","text":""},{"location":"Self-Made-Libraries/GeneralLibrary/#stringtovector3","title":".StringToVector3()","text":"Psuedo Code<pre><code>function module.Conversions.StringToVector3(vector3_as_string: string, separator: string): Vector3\n    local choords_split_up = string.split(vector3_as_string, separator)\n    local x, y, z = choords_split_up[1], choords_split_up[2], choords_split_up[3]\n\n    return Vector3.new(x, y, z)\nend\n</code></pre> <p>Creates a Vector3 based off a string where the x, y, and z choordinates are split by the <code>separator</code>.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#vector3tocframe","title":".Vector3ToCFrame()","text":"Psuedo Code<pre><code>function module.Conversions.Vector3ToCFrame(position: Vector3, rotation: Vector3?): CFrame\n    return CFrame.new(position) * CFrame.Angles(rotation.X, rotation.Y, rotation.Z)\nend\n</code></pre> <p>Creates a CFrame with position <code>position</code> and an optional rotation <code>rotation</code>.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#vector3tostring","title":".Vector3ToString()","text":"Psuedo Code<pre><code>function module.Conversions.Vector3ToString(vector: Vector3, separator: string, round: boolean?,\n    places: number?): string\n\n    local x,y,z = vector.X, vector.Y, vector.Z\n\n    if round == true then\n        ... -- Round x, y, and z\n    end\n\n    return x .. separator .. y .. separator .. z\nend\n</code></pre> <p>Creates a string from a Vector3 with its choordiantes separated by <code>separator</code>. Numbers can be rounded if <code>round</code> is specified. If <code>places</code> is specified, then the number will be rounded to that many decimal places.</p> Source Code <p>You can check out the code here.</p>"},{"location":"Self-Made-Libraries/GeneralLibrary/#cframeanglestovector3","title":".CFrameAnglesToVector3()","text":"Psuedo Code<pre><code>function module.Conversions.CFrameAnglesToVector3(converted: CFrame, round: boolean?, places: number?): Vector3\n    local x, y, z = converted:ToEulerAnglesXYZ()\n\n    if round then\n        ... -- Round x, y, and z\n    end\n\n    return Vector3.new(x, y, z)\nend\n</code></pre> <p>Creates a Vector3 with x,y,z choords based off the x,y,z angles from the CFrame. Numbers can be rounded if <code>round</code> is specified. If <code>places</code> is specified, then the number will be rounded to that many decimal places.</p> Source Code <p>You can check out the code here.</p>"}]}