import { Debounced, DebounceOptions } from "@rbxts/set-timeout";
export interface UseDebounceOptions extends DebounceOptions {
    /**
     * The amount of time to wait before the first call.
     */
    wait?: number;
}
export interface UseDebounceResult<T extends Callback> {
    /**
     * The debounced function.
     */
    run: Debounced<T>;
    /**
     * Cancels delayed invocations to the callback.
     */
    cancel: () => void;
    /**
     * Immediately invokes delayed callback invocations.
     */
    flush: () => void;
    /**
     * Returns whether any invocations are pending.
     */
    pending: () => boolean;
}
export declare function useDebounceCallback<T extends Callback>(callback: T, options?: UseDebounceOptions): {
    run: Debounced<T>;
    cancel: () => void;
    flush: () => ReturnType<T>;
    pending: () => boolean;
};
