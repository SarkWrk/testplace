-- Compiled with roblox-ts v2.3.0-dev-ff69514
local TS = _G[script]
local source = TS.import(script, TS.getModule(script, "@rbxts", "vide").src).source
local useDeferCallback = TS.import(script, script.Parent, "use-defer-callback").useDeferCallback
--[[
	*
	 * returns a source that will be updated on the next Heartbeat
	 * frame. Only the latest update in a frame will run.
	 *
	 * This is useful for improving performance when updating state in response to
	 * events that fire rapidly in succession.
	 *
	 * @param initialState Optional initial state
	 * @returns A tuple containing the state and a function to update it
	 
]]
local function useDeferSource(init)
	local deferSource = source(init)
	local defer = useDeferCallback(deferSource)
	local proxy = function(value)
		if value == nil then
			return deferSource()
		end
		defer(value)
		return value
	end
	return proxy
end
return {
	useDeferSource = useDeferSource,
}
