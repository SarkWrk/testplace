-- Compiled with roblox-ts v2.3.0-dev-ff69514
local TS = _G[script]
local CollectionService = TS.import(script, TS.getModule(script, "@rbxts", "services")).CollectionService
local source = TS.import(script, TS.getModule(script, "@rbxts", "vide").src).source
local useEventListener = TS.import(script, script.Parent, "use-event-listener").useEventListener
local lockSource = TS.import(script, script.Parent, "utils").lockSource
local function useTagged(tag)
	local instances = source(CollectionService:GetTagged(tag))
	useEventListener(CollectionService:GetInstanceAddedSignal(tag), function(instance)
		local nextInstances = table.clone(instances())
		local _instance = instance
		table.insert(nextInstances, _instance)
		instances(nextInstances)
	end)
	useEventListener(CollectionService:GetInstanceRemovedSignal(tag), function(instance)
		local _instances = instances()
		local nextInstances = table.clone(_instances)
		local _instance = instance
		local _arg0 = (table.find(_instances, _instance) or 0) - 1
		-- ▼ Array.unorderedRemove ▼
		local _index = _arg0 + 1
		local _length = #nextInstances
		local _value = nextInstances[_index]
		if _value ~= nil then
			nextInstances[_index] = nextInstances[_length]
			nextInstances[_length] = nil
		end
		-- ▲ Array.unorderedRemove ▲
		instances(nextInstances)
	end)
	return lockSource(instances)
end
return {
	useTagged = useTagged,
}
