-- Compiled with roblox-ts v2.3.0-dev-ff69514
local TS = _G[script]
local _vide = TS.import(script, TS.getModule(script, "@rbxts", "vide").src)
local cleanup = _vide.cleanup
local source = _vide.source
local untrack = _vide.untrack
local lockSource = TS.import(script, script.Parent, "utils").lockSource
--[[
	*
	 * Returns a tuple containing the current state of the promise and a callback
	 * to start a new promise. Calling it will cancel any previous promise.
	 * @param callback The async callback.
	 * @returns The state and a new callback.
	 
]]
local function useAsyncCallback(callback)
	local currentPromise = nil
	local state = source({
		status = "Started",
	})
	local function caller(...)
		local args = { ... }
		if currentPromise ~= nil then
			currentPromise:cancel()
		end
		if untrack(state).status ~= "Started" then
			state({
				status = "Started",
			})
		end
		local promise = callback(unpack(args))
		promise:andThen(function(value)
			return state({
				status = promise:getStatus(),
				value = value,
			})
		end, function(message)
			return state({
				status = promise:getStatus(),
				message = message,
			})
		end)
		currentPromise = promise
		return currentPromise
	end
	cleanup(function()
		if currentPromise ~= nil then
			currentPromise:cancel()
		end
	end)
	return lockSource(state), caller
end
return {
	useAsyncCallback = useAsyncCallback,
}
