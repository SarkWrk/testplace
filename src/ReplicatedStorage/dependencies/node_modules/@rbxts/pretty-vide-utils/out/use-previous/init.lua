-- Compiled with roblox-ts v2.3.0-dev-ff69514
local TS = _G[script]
local _vide = TS.import(script, TS.getModule(script, "@rbxts", "vide").src)
local effect = _vide.effect
local source = _vide.source
local untrack = _vide.untrack
local lockSource = TS.import(script, script.Parent, "utils").lockSource
local function isStrictEqual(a, b)
	return a == b
end
--[[
	*
	 * Returns a source with the most recent value from the previous render. Is `undefined`
	 * on the first render.
	 *
	 * Takes an optional `predicate` function as the second argument that receives
	 * the previous and current value. If the predicate returns `false`, the values
	 * are not equal, and the previous value is updated.
	 *
	 * @param value The source to update to on the next render if it changes.
	 * @param predicate Optional function to determine whether the value changed.
	 * Defaults to a strict equality check (`===`).
	 * @returns Source with the previous value.
	 
]]
local function usePrevious(value, predicate)
	local previous = source()
	predicate = predicate or isStrictEqual
	effect(function()
		local current = value()
		local old = untrack(previous)
		if not predicate(old, current) then
			previous(current)
		end
	end)
	return lockSource(previous)
end
return {
	usePrevious = usePrevious,
}
